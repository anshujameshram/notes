In JavaScript, every object has a hidden internal property called [[Prototype]] (or __proto__ in some environments). This prototype is another object from which the original object inherits methods and properties.

This forms the basis of prototypal inheritance.

ðŸ”¹ Why is Prototype Used?
To allow objects to share behavior (methods) without copying them into every instance.

ðŸ”¹ Understanding with Example

function Person(name, age) {
  this.name = name;
  this.age = age;
}

// Adding a method to Person's prototype
Person.prototype.sayHello = function() {
  console.log(`Hello, my name is ${this.name}`);
};

// Creating a new object
const person1 = new Person("Alice", 30);

// Accessing sayHello method via prototype
person1.sayHello();  // Output: Hello, my name is Alice

âš™ How it works:
person1 does not have sayHello method directly on it.
JavaScript looks up the prototype chain and finds sayHello in Person.prototype.



1.All JavaScript objects inherit properties and methods from a prototype.

Prototype Inheritance
All JavaScript objects inherit properties and methods from a prototype:

Date objects inherit from Date.prototype
Array objects inherit from Array.prototype
Person objects inherit from Person.prototype
The Object.prototype is on the top of the prototype inheritance chain:

Date objects, Array objects, and Person objects inherit from Object.prototype.


Adding Properties and Methods to Objects
Sometimes you want to add new properties (or methods) to all existing objects of a given type.

Sometimes you want to add new properties (or methods) to an object constructor.



Using the prototype Property
The JavaScript prototype property allows you to add new properties to object constructors:

Example

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.nationality = "English";



The JavaScript prototype property also allows you to add new methods to objects constructors:

Example
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};


